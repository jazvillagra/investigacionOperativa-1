julia> using JuMP, Clp, LinearAlgebra

julia> m = Model(with_optimizer(Clp.Optimizer))
A JuMP Model
Feasibility problem with:
Variables: 0
Model mode: AUTOMATIC
CachingOptimizer state: EMPTY_OPTIMIZER
Solver name: SolverName() attribute not implemented by the optimizer.

julia>

julia> costo=[12 7 10;
           8 11 9]
2×3 Array{Int64,2}:
 12   7  10
  8  11   9

julia> demanda=[5500 3500 3500]
1×3 Array{Int64,2}:
 5500  3500  3500

julia> oferta=[7200;
               5300]
2-element Array{Int64,1}:
 7200
 5300

julia>

julia> @variable(m,x[1:2,1:3]>=0 )
2×3 Array{VariableRef,2}:
 x[1,1]  x[1,2]  x[1,3]
 x[2,1]  x[2,2]  x[2,3]

julia> @objective(m,Min,sum(x.*costo))
12 x[1,1] + 8 x[2,1] + 7 x[1,2] + 11 x[2,2] + 10 x[1,3] + 9 x[2,3]

julia> for i=1:2
           @constraint(m,sum(x[i,j] for j=1:3)==oferta[i])
           end

julia> for j=1:3
       @constraint(m,sum(x[i,j] for i=1:2)==demanda[j])
       end

julia> print(m)
Min 12 x[1,1] + 8 x[2,1] + 7 x[1,2] + 11 x[2,2] + 10 x[1,3] + 9 x[2,3]
Subject to
 x[1,1] >= 0.0
 x[1,2] >= 0.0
 x[1,3] >= 0.0
 x[2,1] >= 0.0
 x[2,2] >= 0.0
 x[2,3] >= 0.0
 x[1,1] + x[1,2] + x[1,3] == 7200.0
 x[2,1] + x[2,2] + x[2,3] == 5300.0
 x[1,1] + x[2,1] == 5500.0
 x[1,2] + x[2,2] == 3500.0
 x[1,3] + x[2,3] == 3500.0

julia> JuMP.optimize!(m)
Coin0506I Presolve 2 (-3) rows, 3 (-3) columns and 6 (-6) elements
Clp0006I 0  Obj 114799.6 Primal inf 14000.2 (2) Dual inf 3.999999 (1)
Clp0006I 1  Obj 104300
Clp0000I Optimal - objective value 104300
Coin0511I After Postsolve, objective 104300, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 104300 - 1 iterations time 0.102, Presolve 0.05

julia> obj_value=JuMP.objective_value(m)
104300.0

julia>

julia> println("Valor func objetivo, El costo minimo es :", obj_value)
Valor func objetivo, El costo minimo es :104300.0

julia>

julia>

julia> println("las asignaciones son")
las asignaciones son

julia> for  i=1:2
           for j=1:3
                   println( "x[",i,",",j, "] = $(JuMP.value(x[i,j] ))")
                       end
                       end
x[1,1] = 200.0
x[1,2] = 3500.0
x[1,3] = 3500.0
x[2,1] = 5300.0
x[2,2] = 0.0
x[2,3] = 0.0